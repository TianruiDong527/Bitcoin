{"ast":null,"code":"var _jsxFileName = \"/Users/dongtianrui/Desktop/NEU/INFO7500/my-bitcoin-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction App() {\n  _s();\n  const [priceData, setPriceData] = useState(null); // For storing price data\n  const [error, setError] = useState('');\n\n  // Fetch Bitcoin price data for the past 2 days from CoinGecko\n  const fetchPriceData = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=2');\n      if (!response.ok) throw new Error('Failed to fetch price data');\n      const data = await response.json();\n\n      // Extract timestamps and prices from the response\n      const labels = data.prices.map(pricePoint => {\n        const date = new Date(pricePoint[0]); // Convert timestamp to Date\n        return date.getHours() + ':00'; // Extract hour (e.g., \"14:00\")\n      });\n      const prices = data.prices.map(pricePoint => pricePoint[1]); // Extract prices\n\n      setPriceData({\n        labels: labels.slice(-24),\n        // Only keep the last 24 hours\n        datasets: [{\n          label: 'Bitcoin Price (USD)',\n          data: prices.slice(-24),\n          // Only keep the last 24 prices\n          borderColor: 'rgba(75, 192, 192, 1)',\n          // Line color\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          // Fill color\n          fill: true // Enable area fill under the line\n        }]\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Fetch data when the component mounts\n  useEffect(() => {\n    fetchPriceData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bitcoin Price - Last 24 Hours\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), priceData ? /*#__PURE__*/_jsxDEV(Line, {\n      data: priceData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: 'Bitcoin Price in USD (Last 24 Hours)'\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Time (Hourly)'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Price (USD)'\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error ? error : 'Loading price data...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FQPwmarewAVsx3I+snHyMlIPj2o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","App","_s","priceData","setPriceData","error","setError","fetchPriceData","response","fetch","ok","Error","data","json","labels","prices","map","pricePoint","date","Date","getHours","slice","datasets","label","borderColor","backgroundColor","fill","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","plugins","legend","display","position","title","text","scales","x","y","_c","$RefreshReg$"],"sources":["/Users/dongtianrui/Desktop/NEU/INFO7500/my-bitcoin-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nfunction App() {\n  const [priceData, setPriceData] = useState(null);  // For storing price data\n  const [error, setError] = useState('');\n\n  // Fetch Bitcoin price data for the past 2 days from CoinGecko\n  const fetchPriceData = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=2');\n      if (!response.ok) throw new Error('Failed to fetch price data');\n      const data = await response.json();\n\n      // Extract timestamps and prices from the response\n      const labels = data.prices.map(pricePoint => {\n        const date = new Date(pricePoint[0]);  // Convert timestamp to Date\n        return date.getHours() + ':00';        // Extract hour (e.g., \"14:00\")\n      });\n\n      const prices = data.prices.map(pricePoint => pricePoint[1]);  // Extract prices\n\n      setPriceData({\n        labels: labels.slice(-24),   // Only keep the last 24 hours\n        datasets: [\n          {\n            label: 'Bitcoin Price (USD)',\n            data: prices.slice(-24),   // Only keep the last 24 prices\n            borderColor: 'rgba(75, 192, 192, 1)',  // Line color\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',  // Fill color\n            fill: true,          // Enable area fill under the line\n          },\n        ],\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Fetch data when the component mounts\n  useEffect(() => {\n    fetchPriceData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Bitcoin Price - Last 24 Hours</h1>\n\n      {/* Render the chart */}\n      {priceData ? (\n        <Line\n          data={priceData}\n          options={{\n            responsive: true,\n            plugins: {\n              legend: { display: true, position: 'top' },\n              title: { display: true, text: 'Bitcoin Price in USD (Last 24 Hours)' },\n            },\n            scales: {\n              x: { title: { display: true, text: 'Time (Hourly)' } },\n              y: { title: { display: true, text: 'Price (USD)' } },\n            },\n          }}\n        />\n      ) : (\n        <p>{error ? error : 'Loading price data...'}</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}