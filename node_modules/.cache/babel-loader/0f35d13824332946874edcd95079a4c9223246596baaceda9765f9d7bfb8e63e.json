{"ast":null,"code":"var _jsxFileName = \"/Users/dongtianrui/Desktop/NEU/INFO7500/my-bitcoin-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport './App.css';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction App() {\n  _s();\n  var _btcMetrics$marketCap, _btcMetrics$volume24h;\n  const [blockInfo, setBlockInfo] = useState(null); // Detailed block information\n  const [blockHeight, setBlockHeight] = useState(null); // Block height\n  const [btcPrice, setBtcPrice] = useState(null); // Off-chain: Bitcoin price in USD\n  const [btcMetrics, setBtcMetrics] = useState(null); // Other off-chain metrics\n  const [priceData, setPriceData] = useState(null); // Price data for the chart\n  const [fearGreedIndex, setFearGreedIndex] = useState(null); // Fear and Greed Index\n  const [error, setError] = useState('');\n\n  // Fetch latest Bitcoin block info (on-chain data from Blockchair API)\n  const fetchLatestBlockInfo = async () => {\n    try {\n      const response = await fetch('https://api.blockchair.com/bitcoin/blocks?limit=1');\n      if (!response.ok) throw new Error('Failed to fetch latest block info');\n      const data = await response.json();\n      const latestBlock = data.data[0];\n      if (latestBlock) {\n        setBlockHeight(latestBlock.id);\n        setBlockInfo({\n          hash: latestBlock.hash,\n          size: latestBlock.size,\n          difficulty: latestBlock.difficulty,\n          totalVolume: latestBlock.weight\n        });\n      } else {\n        throw new Error('No latest block data found');\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Fetch Bitcoin price and other off-chain data (from CoinGecko)\n  const fetchBtcMetrics = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/coins/bitcoin?localization=false');\n      if (!response.ok) throw new Error('Failed to fetch Bitcoin metrics');\n      const data = await response.json();\n      setBtcPrice(data.market_data.current_price.usd);\n      setBtcMetrics({\n        marketCap: data.market_data.market_cap.usd,\n        volume24h: data.market_data.total_volume.usd,\n        priceChange24h: data.market_data.price_change_percentage_24h,\n        priceChange7d: data.market_data.price_change_percentage_7d\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Fetch Bitcoin price data for the past 2 days from CoinGecko\n  const fetchPriceData = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=2');\n      if (!response.ok) throw new Error('Failed to fetch price data');\n      const data = await response.json();\n      const labels = data.prices.map(pricePoint => {\n        const date = new Date(pricePoint[0]);\n        return date.getHours() + ':00';\n      });\n      const prices = data.prices.map(pricePoint => pricePoint[1]);\n      setPriceData({\n        labels: labels.slice(-24),\n        datasets: [{\n          label: 'Bitcoin Price (USD)',\n          data: prices.slice(-24),\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: true\n        }]\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Fetch the Fear and Greed Index from Alternative.me\n  const fetchFearGreedIndex = async () => {\n    try {\n      const response = await fetch('https://api.alternative.me/fng/?limit=1');\n      if (!response.ok) throw new Error('Failed to fetch Fear and Greed Index');\n      const data = await response.json();\n      const indexData = data.data[0];\n      setFearGreedIndex({\n        value: indexData.value,\n        classification: indexData.value_classification\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Map Fear and Greed Index classification to corresponding emoji\n  const getEmojiForClassification = classification => {\n    switch (classification) {\n      case 'Extreme Fear':\n        return '😨';\n      case 'Fear':\n        return '😟';\n      case 'Neutral':\n        return '😐';\n      case 'Greed':\n        return '😃';\n      case 'Extreme Greed':\n        return '😈';\n      default:\n        return '';\n    }\n  };\n\n  // Use `useEffect` to fetch data on component mount\n  useEffect(() => {\n    fetchLatestBlockInfo(); // Fetch latest block info\n    fetchBtcMetrics(); // Fetch Bitcoin price and other metrics\n    fetchPriceData(); // Fetch Bitcoin price data for chart\n    fetchFearGreedIndex(); // Fetch Fear and Greed Index\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Bitcoin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), blockHeight !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block-height\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Block Height: \", blockHeight]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading block height...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this), blockInfo !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Latest Block Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Block Hash: \", blockInfo.hash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Block Size: \", blockInfo.size, \" bytes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mining Difficulty: \", blockInfo.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Transaction Volume (Weight): \", blockInfo.totalVolume]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading latest block information...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), btcPrice !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btc-metrics\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Bitcoin Market Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Bitcoin Price (USD): $\", btcPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Market Cap: $\", (_btcMetrics$marketCap = btcMetrics.marketCap) === null || _btcMetrics$marketCap === void 0 ? void 0 : _btcMetrics$marketCap.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"24h Volume: $\", (_btcMetrics$volume24h = btcMetrics.volume24h) === null || _btcMetrics$volume24h === void 0 ? void 0 : _btcMetrics$volume24h.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"24h Price Change: \", btcMetrics.priceChange24h, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"7d Price Change: \", btcMetrics.priceChange7d, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Bitcoin market data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this), fearGreedIndex !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fear-greed-index\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Fear and Greed Index \", getEmojiForClassification(fearGreedIndex.classification)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Index: \", fearGreedIndex.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Market Sentiment: \", fearGreedIndex.classification]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"progress\", {\n          max: \"100\",\n          value: fearGreedIndex.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Fear and Greed Index...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this), priceData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Bitcoin Price - Last 24 Hours\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: priceData,\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: 'Bitcoin Price in USD (Last 24 Hours)'\n            }\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Time (Hourly)'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Price (USD)'\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Bitcoin price chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Lpd0iwNxmbdfvdS1iUoyOvIA2hk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","App","_s","_btcMetrics$marketCap","_btcMetrics$volume24h","blockInfo","setBlockInfo","blockHeight","setBlockHeight","btcPrice","setBtcPrice","btcMetrics","setBtcMetrics","priceData","setPriceData","fearGreedIndex","setFearGreedIndex","error","setError","fetchLatestBlockInfo","response","fetch","ok","Error","data","json","latestBlock","id","hash","size","difficulty","totalVolume","weight","err","message","fetchBtcMetrics","market_data","current_price","usd","marketCap","market_cap","volume24h","total_volume","priceChange24h","price_change_percentage_24h","priceChange7d","price_change_percentage_7d","fetchPriceData","labels","prices","map","pricePoint","date","Date","getHours","slice","datasets","label","borderColor","backgroundColor","fill","fetchFearGreedIndex","indexData","value","classification","value_classification","getEmojiForClassification","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","max","options","responsive","plugins","legend","display","position","title","text","scales","x","y","style","color","_c","$RefreshReg$"],"sources":["/Users/dongtianrui/Desktop/NEU/INFO7500/my-bitcoin-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport './App.css';\n\n// Register Chart.js components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nfunction App() {\n  const [blockInfo, setBlockInfo] = useState(null);      // Detailed block information\n  const [blockHeight, setBlockHeight] = useState(null);  // Block height\n  const [btcPrice, setBtcPrice] = useState(null);        // Off-chain: Bitcoin price in USD\n  const [btcMetrics, setBtcMetrics] = useState(null);    // Other off-chain metrics\n  const [priceData, setPriceData] = useState(null);      // Price data for the chart\n  const [fearGreedIndex, setFearGreedIndex] = useState(null);  // Fear and Greed Index\n  const [error, setError] = useState('');\n\n  // Fetch latest Bitcoin block info (on-chain data from Blockchair API)\n  const fetchLatestBlockInfo = async () => {\n    try {\n      const response = await fetch('https://api.blockchair.com/bitcoin/blocks?limit=1');\n      if (!response.ok) throw new Error('Failed to fetch latest block info');\n      const data = await response.json();\n      \n      const latestBlock = data.data[0];\n      if (latestBlock) {\n        setBlockHeight(latestBlock.id);\n        setBlockInfo({\n          hash: latestBlock.hash,\n          size: latestBlock.size,\n          difficulty: latestBlock.difficulty,\n          totalVolume: latestBlock.weight,\n        });\n      } else {\n        throw new Error('No latest block data found');\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Fetch Bitcoin price and other off-chain data (from CoinGecko)\n  const fetchBtcMetrics = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/coins/bitcoin?localization=false');\n      if (!response.ok) throw new Error('Failed to fetch Bitcoin metrics');\n      const data = await response.json();\n\n      setBtcPrice(data.market_data.current_price.usd);\n      setBtcMetrics({\n        marketCap: data.market_data.market_cap.usd,\n        volume24h: data.market_data.total_volume.usd,\n        priceChange24h: data.market_data.price_change_percentage_24h,\n        priceChange7d: data.market_data.price_change_percentage_7d,\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Fetch Bitcoin price data for the past 2 days from CoinGecko\n  const fetchPriceData = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=2');\n      if (!response.ok) throw new Error('Failed to fetch price data');\n      const data = await response.json();\n\n      const labels = data.prices.map(pricePoint => {\n        const date = new Date(pricePoint[0]);\n        return date.getHours() + ':00';\n      });\n\n      const prices = data.prices.map(pricePoint => pricePoint[1]);\n\n      setPriceData({\n        labels: labels.slice(-24),\n        datasets: [\n          {\n            label: 'Bitcoin Price (USD)',\n            data: prices.slice(-24),\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            fill: true,\n          },\n        ],\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Fetch the Fear and Greed Index from Alternative.me\n  const fetchFearGreedIndex = async () => {\n    try {\n      const response = await fetch('https://api.alternative.me/fng/?limit=1');\n      if (!response.ok) throw new Error('Failed to fetch Fear and Greed Index');\n      const data = await response.json();\n      const indexData = data.data[0];\n      setFearGreedIndex({\n        value: indexData.value,\n        classification: indexData.value_classification,\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Map Fear and Greed Index classification to corresponding emoji\n  const getEmojiForClassification = (classification) => {\n    switch (classification) {\n      case 'Extreme Fear':\n        return '😨';\n      case 'Fear':\n        return '😟';\n      case 'Neutral':\n        return '😐';\n      case 'Greed':\n        return '😃';\n      case 'Extreme Greed':\n        return '😈';\n      default:\n        return '';\n    }\n  };\n\n  // Use `useEffect` to fetch data on component mount\n  useEffect(() => {\n    fetchLatestBlockInfo();  // Fetch latest block info\n    fetchBtcMetrics();       // Fetch Bitcoin price and other metrics\n    fetchPriceData();        // Fetch Bitcoin price data for chart\n    fetchFearGreedIndex();   // Fetch Fear and Greed Index\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"title\">Bitcoin Dashboard</h1>\n\n      {/* Display latest block height */}\n      {blockHeight !== null ? (\n        <div className=\"block-height\">\n          <h2>Block Height: {blockHeight}</h2>\n        </div>\n      ) : (\n        <p>Loading block height...</p>\n      )}\n\n      {/* Display latest block information */}\n      {blockInfo !== null ? (\n        <div className=\"block-info\">\n          <h2>Latest Block Information</h2>\n          <p>Block Hash: {blockInfo.hash}</p>\n          <p>Block Size: {blockInfo.size} bytes</p>\n          <p>Mining Difficulty: {blockInfo.difficulty}</p>\n          <p>Total Transaction Volume (Weight): {blockInfo.totalVolume}</p>\n        </div>\n      ) : (\n        <p>Loading latest block information...</p>\n      )}\n\n      {/* Display Bitcoin price and other off-chain data */}\n      {btcPrice !== null ? (\n        <div className=\"btc-metrics\">\n          <h2>Bitcoin Market Data</h2>\n          <p>Bitcoin Price (USD): ${btcPrice}</p>\n          <p>Market Cap: ${btcMetrics.marketCap?.toLocaleString()}</p>\n          <p>24h Volume: ${btcMetrics.volume24h?.toLocaleString()}</p>\n          <p>24h Price Change: {btcMetrics.priceChange24h}%</p>\n          <p>7d Price Change: {btcMetrics.priceChange7d}%</p>\n        </div>\n      ) : (\n        <p>Loading Bitcoin market data...</p>\n      )}\n\n      {/* Display Fear and Greed Index */}\n      {fearGreedIndex !== null ? (\n        <div className=\"fear-greed-index\">\n          <h2>Fear and Greed Index {getEmojiForClassification(fearGreedIndex.classification)}</h2>\n          <p>Current Index: {fearGreedIndex.value}</p>\n          <p>Market Sentiment: {fearGreedIndex.classification}</p>\n          \n          {/* Progress bar for the index */}\n          <div className=\"progress-bar\">\n            <progress max=\"100\" value={fearGreedIndex.value}></progress>\n          </div>\n        </div>\n      ) : (\n        <p>Loading Fear and Greed Index...</p>\n      )}\n\n      {/* Display Bitcoin price chart */}\n      {priceData ? (\n        <div className=\"chart-container\">\n          <h2>Bitcoin Price - Last 24 Hours</h2>\n          <Line\n            data={priceData}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: { display: true, position: 'top' },\n                title: { display: true, text: 'Bitcoin Price in USD (Last 24 Hours)' },\n              },\n              scales: {\n                x: { title: { display: true, text: 'Time (Hourly)' } },\n                y: { title: { display: true, text: 'Price (USD)' } },\n              },\n            }}\n          />\n        </div>\n      ) : (\n        <p>Loading Bitcoin price chart...</p>\n      )}\n\n      {/* Display any errors */}\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}